spring.h2.console.path=/h2-console
spring.h2.console.enabled=true
spring.jpa.show-sql=true

spring.datasource.url=jdbc:h2:mem:hospitals-db
spring.jpa.hibernate.ddl-auto=create-drop

server.port=0
eureka.instance.instance-id=${spring.application.name}:${random.value}
# It provides to register each hospital-service instance.
spring.application.name=hospital-service
eureka.instance.prefer-ip-address=true
eureka.client.service-url.default-zone=http://localhost:8761/eureka
spring.profiles.active=dev
#default for hospital-service.properties

spring.zipkin.base-url=http://localhost:9411

spring.config.import=optional:vault://
# Using "optional" keyword means that if configserver can not be found, there will be no error.

spring.cloud.config.enabled=false
#False prevents to enable default spring config values. Centralized configuraitons wiil be provided by vault.

spring.cloud.vault.enabled=true
# Enables vault configs

spring.cloud.vault.uri=http://localhost:8282
# You can define this url as environment variable at server. It will be more secure.

spring.cloud.vault.authentication=token
spring.cloud.vault.token=${VAULT_TOKEN}
#Setting environment variable example

spring.cloud.vault.kv.enabled=true
spring.cloud.vault.kv.default-context=hospital-service
#Indicates the directory where you keep the properties at Vault.

spring.cloud.vault.kv.backend=dev
#Indicates the directory which is searched by vault for finding keys.

hospital-service.count=${hospital.service.count:2}
example-vault.key=${example_vault_key:"default"}

management.endpoints.web.exposure.include=*
#When we change some properties at documents, even in Vault,
# we don't have to build application again thanks to refresh feature of Spring Actuator.
# It is enough to trigger refresh endpoint of Spring Actuator. POST request to "http://localhost:(port)/actuator/refresh

grpc.server.port=9797
grpc.client.doctor-service.enable-keep-alive=true
grpc.client.doctor-service.keep-alive-without-calls=true
grpc.client.doctor-service.negotiation-type=plaintext

